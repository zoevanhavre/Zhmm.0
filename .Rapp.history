require(ggplot2)#
  x       <- with(c2,seq(min(x),max(x),len=1000))#
  pars    <- with(c2,data.frame(comp=colnames(posterior), mu, sigma,lambda))#
  em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)#
  em.df$y <- with(em.df,lambda*dnorm(x,mean=mu,sd=sigma))#
  ggplot(data.frame(x=c2$x),aes(x,y=..density..)) + #
    geom_histogram(fill=NA,color="black")+#
    geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+#
    scale_fill_discrete("Component\nMeans",labels=format(em.df$mu,digits=3))+#
    theme_bw()
In<-list("Y"=Y, "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "pie"=c(0.5,0.3,0.2) )
Xmix<-list("Y"=Y, "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "lambda"=c(0.5,0.3,0.2) )
sdnorm =function(x, mean=0, sd=1, lambda=1){lambda*dnorm(x, mean=mean, sd=sd)}
qplot(Xmix,geom="density") +
stat_function(fun=sdnorm,arg=list(mean=xMix$mu[1],sd=xMix$sigma[1],
lambda=xMix$lambda[1]),fill="blue",geom="polygon")  +
stat_function(fun=sdnorm,arg=list(mean=xMix$mu[2],sd=xMix$sigma[2], lambda=xMix$lambda[2]),fill="#FF0000",geom="polygon")
Xmix<-list("Y"=Y, "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "lambda"=c(0.5,0.3,0.2) )
qplot(Xmix,geom="density") + #
stat_function(fun=sdnorm,arg=list(mean=xMix$mu[1],sd=xMix$sigma[1],#
 lambda=xMix$lambda[1]),fill="blue",geom="polygon")  + #
stat_function(fun=sdnorm,arg=list(mean=xMix$mu[2],sd=xMix$sigma[2], lambda=xMix$lambda[2]),fill="#FF0000",geom="polygon")
xMix<-list("Y"=Y, "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "lambda"=c(0.5,0.3,0.2) )
qplot(Y,geom="density") + #
stat_function(fun=sdnorm,arg=list(mean=xMix$mu[1],sd=xMix$sigma[1],#
 lambda=xMix$lambda[1]),fill="blue",geom="polygon")  + #
stat_function(fun=sdnorm,arg=list(mean=xMix$mu[2],sd=xMix$sigma[2], lambda=xMix$lambda[2]),fill="#FF0000",geom="polygon")
sdornm
sdnorm
dnorm(2)
sdnorm(1)
x       <- seq(min(In$Y)-sig(In$Y),max(In$Y)+sig(In$Y),len=1000)
x       <- seq(min(In$Y)-var(In$Y),max(In$Y)+var(In$Y),len=1000)
pars    <- data.frame(comp=paste("K",c(1:length(In$pie)), sep="_"), In$mu, In$sig, In$pie )
em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)
em.df$y <- with(em.df,In.pie*dnorm(x,mean=In.mu,sd=In.sig))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
x       <- seq(min(In$Y)-var(In$Y)/5,max(In$Y)+var(In$Y)/5,len=1000)
pars    <- data.frame(comp=paste("K",c(1:length(In$pie)), sep="_"), In$mu, In$sig, In$pie )
em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)
em.df$y <- with(em.df,In.pie*dnorm(x,mean=In.mu,sd=In.sig))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
In<-list("Y"=sim1func(100)$Y , "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "lambda"=c(0.5,0.3,0.2) )
em.df$y <- with(em.df,In.Pie*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
In<-list("Y"=sim1func(1000)$Y , "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "lambda"=c(0.5,0.3,0.2) )
x       <- seq(min(In$Y)-var(In$Y)/5,max(In$Y)+var(In$Y)/5,len=1000)
pars    <- data.frame(comp=paste("K",c(1:length(In$Pie)), sep="_"), In$mu, In$sig, In$Pie )
em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)
em.df$y <- with(em.df,In.Pie*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
In
pars    <- data.frame(comp=paste("K",c(1:length(In$Pie)), sep="_"), In$mu, In$sig, In$lambda )
pars    <- data.frame(comp=paste("K",c(1:length(In$Pie)), sep="_"), In$mu, In$sigma, In$lambda )
pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sigma, In$lambda )
em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)
em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sigma)))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
x       <- seq(min(In$Y)-1,max(In$Y)+1,len=1000)#
  pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sig, In$lambda )#
  em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)#
  em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sigma)))#
  ggplot(data.frame(x=In$Y),aes(x,y=..density..)) + #
    geom_histogram(fill=NA,color="black")+#
    geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+#
    scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+#
    theme_bw()
In<-list("Y"=sim1func(1000)$Y , "mu"=c(-1,10,4), "sigma"=c(0.5,0.5,3), "lambda"=c(0.5,0.3,0.2) )
x       <- seq(min(In$Y)-1,max(In$Y)+1,len=1000)#
  pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sig, In$lambda )#
  em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)#
  em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sigma)))#
  ggplot(data.frame(x=In$Y),aes(x,y=..density..)) + #
    geom_histogram(fill=NA,color="black")+#
    geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+#
    scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+#
    theme_bw()
mu<-In$mu
sig<-In$sigma
weight<-In$lambda
In<-list("Y"=Y, "mu"=mu, "sigma"=sig, "lambda"=weight)
x       <- seq(min(In$Y)-1,max(In$Y)+1,len=1000)
pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sig, In$lambda )
em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)
em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sigma)))
head(em.df)
em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
x       <- seq(min(In$Y)-5,max(In$Y)+5,len=1000)
pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sig, In$lambda )
em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)
em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))
ggplot(data.frame(x=In$Y),aes(x,y=..density..)) +
geom_histogram(fill=NA,color="black")+
geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+
scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+
theme_bw()
gg.mix(sim1func(100),c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
gg.mix <- function(Y, mu, sig, weight) {#
In<-list("Y"=Y, "mu"=mu, "sigma"=sig, "lambda"=weight)#
  require(ggplot2)#
   x       <- seq(min(In$Y)-5,max(In$Y)+5,len=1000)#
  pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sig, In$lambda )#
  em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)#
  em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))#
  ggplot(data.frame(x=In$Y),aes(x,y=..density..)) + #
    geom_histogram(fill=NA,color="black")+#
    geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+#
    scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+#
    theme_bw()#
}#
#
gg.mix(sim1func(100),c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
gg.mix(sim1func(100)$O,c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
gg.mix <- function(Y, mu, sig, weight) {#
In<-list("Y"=Y, "mu"=mu, "sigma"=sig, "lambda"=weight)#
  require(ggplot2)#
   x       <- seq(min(Y)-5,max(Y)+5,len=1000)#
  pars    <- data.frame(comp=paste("K",c(1:length(In$lambda)), sep="_"), In$mu, In$sig, In$lambda )#
  em.df   <- data.frame(x=rep(x,each=nrow(pars)),pars)#
  em.df$y <- with(em.df,In.lambda*dnorm(x,mean=In.mu,sd=sqrt(In.sig)))#
  ggplot(data.frame(x=In$Y),aes(x,y=..density..)) + #
    geom_histogram(fill=NA,color="black")+#
    geom_polygon(data=em.df,aes(x,y,fill=comp),color="grey50", alpha=0.5)+#
    scale_fill_discrete("Component\nMeans",labels=format(em.df$In.mu,digits=3))+#
    theme_bw()#
}
gg.mix(sim1func(100)$O,c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
gg.mix(Y=sim1func(100)$O,c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
sim1func(100)$O
gg.mix(Y=sim1func(100)$Obs,c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
sim1func(100)$Obs
sim1func(10)$Obs
sim1func(10)
gg.mix(Y=sim1func(100)$Y,c(-1,10,4), c(0.5,0.5,3), c(0.5,0.3,0.2)  )
gg.mix(Y=sim6func(100)$Y,c(15, 7, 1),c(1, 1, 1),c(0.4,  0.35, 0.25))
library(Zhmm)
set.seed(88)
Y1<-FunkSim1(100)
Y1.d<-SimDensity1(Y1)
set.seed(88)
run1.S1n100.COLtheory<- gibbsHMM_PT_wDist2(YZ, M=20000, K=10 ,alphaMAX=aMAXtheory(0.001, 10,"Rousseau"), type= 1, alphaMin=0.001, J=20, densTrue=Y1.d, SuppressAll="FALSE")
run1.S1n100.COLtheory<- gibbsHMM_PT_wDist2(Y1, M=2000, K=10 ,alphaMAX=aMAXtheory(0.001, 10,"Rousseau"), type= 1, alphaMin=0.001, J=5, densTrue=Y1.d, SuppressAll="FALSE")
ALTERNATEq0(matrix(  c(.2,0.3,0.5,    0.5,0.25,0.25,    0.25, 0.65, 0.1), nrow=3, byrow=T))
run1.S1n100.COLtheory<- gibbsHMM_PT_wDist2(Y1, M=500, K=10 ,alphaMAX=aMAXtheory(0.001, 10,"Rousseau"), type= 1, alphaMin=0.001, J=2, densTrue=Y1.d, SuppressAll="FALSE")
Mu1<- c(1,3,6)#
q01<-ALTERNATEq0(matrix(  c(.2,0.3,0.5,    0.5,0.25,0.25,    0.25, 0.65, 0.1), nrow=3, byrow=T)) #
tv1<-cbind(Mu1, q01)
run1.S1n100.COLtheory.pp<-Zhmm_PP(run1.S1n100.COLtheory , burn=300, prep=10, isSim=TRUE,trueValues=tv1, minq4PLOT=0.05, simlabel="TEST")
traceback()
run1.S1n100.COLtheory.pp<-Zhmm_PP(run1.S1n100.COLtheory , burn=300, prep=10, isSim=TRUE,trueValues=tv1, minq4PLOT=0.05, simlabel="TEST")
run1.S1n100.COLtheory.pp<-Zhmm_PP(run1.S1n100.COLtheory , burn=300, prep=10, isSim=TRUE,trueValues=tv1, minq4PLOT=0.01, simlabel="TEST")
ALTERNATEq0(matrix(  c(.2,0.3,0.5,    0.5,0.25,0.25,    0.25, 0.65, 0.1), nrow=3, byrow=T))
sum(ALTERNATEq0(matrix(  c(.2,0.3,0.5,    0.5,0.25,0.25,    0.25, 0.65, 0.1), nrow=3, byrow=T)))
run1.S1n100.COLtheory<- gibbsHMM_PT_wDist2(Y1, M=500, K=10 ,alphaMAX=aMAXtheory(0.001, 10,"Rousseau"), type= 1, alphaMin=0.001, J=20, densTrue=Y1.d, SuppressAll="FALSE")
Mu1<- c(1,3,6);q01<- c(0.3290530, 0.3820225, 0.2889246);tv1<-cbind(Mu1, q01)#
set.seed(88)#
Y1<-FunkSim1(500)#
Y1.d<-SimDensity1(Y1)#
set.seed(88)#
run1.S1n500.COLtheory<- gibbsHMM_PT_wDist2(Y1, M=2000, K=10 ,alphaMAX=aMAXtheory(0.001, 10,"Rousseau"), type= 1, alphaMin=0.001, J=30, densTrue=Y1.d, SuppressAll="FALSE")
Mu1<- c(1,3,6);q01<- c(0.3290530, 0.3820225, 0.2889246);tv1<-cbind(Mu1, q01)#
set.seed(88)#
Y1<-FunkSim1(500)#
Y1.d<-SimDensity1(Y1)#
set.seed(88)#
run1.S1n500.COLtheory<- gibbsHMM_PT_wDist2(Y1, M=2000, K=10 ,alphaMAX=aMAXtheory(0.001, 10,"Rousseau"), type= 1, alphaMin=0.001, J=20, densTrue=Y1.d, SuppressAll="FALSE")
Galaxy
data(Galaxy)
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n500_Atheory_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n500_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n500_Atheory_COL.RDATA')
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n500_A1_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n500_A1_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n500_A1_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n100_Atheory_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n100_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n100_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n100_A1_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n100_A1_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part2_n100_A1_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim3_Part1_n500_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n500_Atheory_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n500_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n500_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n500_A1_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n500_A1_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n100_Atheory_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n100_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n100_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n100_A1_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n100_A1_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part2_n100_A1_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part1_n500_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim2_Part1_n500_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n500_Atheory_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n500_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n500_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n500_A1_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n500_A1_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n500_A1_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n100_Atheory_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n100_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n100_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n100_A1_MIX.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n100_A1_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part2_n100_A1_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part1_n500_Atheory_DIAG.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part1_n500_Atheory_COL.RDATA')#
load('~/Google Drive/P3 HMMs/R Code/ReplicateRESULTS/Sim1_Part1_n100_Atheory_COL.RDATA')
ls()
save.image(file="ResultsPart2Replicate.RDATA")
png("ReplPLotSMALL.png", width=800)#
par(mfrow=c(1,3))#
boxplot(cbind(#
	" T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim1_Part2_n500_A1_COL[,3],#
	"1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim1_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
	" T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim2_Part2_n500_A1_COL[,3],#
	"1_D"=Sim2_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
	" T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim3_Part2_n500_A1_COL[,3],#
	"1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim3_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
boxplot(cbind(#
	" T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim2_Part2_n500_A1_COL[,3],#
	"1_D"=Sim2_Part2_n500_A1_DIAG[,3]%,#
	%"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
boxplot(cbind(#
	" T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim2_Part2_n500_A1_COL[,3],#
	"1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
	#"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
par(mfrow=c(1,3))#
boxplot(cbind(#
	" T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim1_Part2_n500_A1_COL[,3],#
	"1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim1_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
	" T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim2_Part2_n500_A1_COL[,3],#
	"1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
	#"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
	" T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim3_Part2_n500_A1_COL[,3],#
	"1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim3_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
par(mfrow=c(2,3))#
boxplot(cbind(#
	" T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
	" T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
	" T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
	"1_C"=Sim1_Part2_n100_A1_COL[,3],#
	"1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
	"1_M"=Sim1_Part2_n100_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
	" T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
	" T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
	" T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
	"1_C"=Sim2_Part2_n100_A1_COL[,3],#
	"1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
	"1_M"=Sim2_Part2_n100_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
	" T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
	" T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
	" T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
	"1_C"=Sim3_Part2_n100_A1_COL[,3],#
	"1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
	"1_M"=Sim3_Part2_n100_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
	" T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim1_Part2_n500_A1_COL[,3],#
	"1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim1_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
	" T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim2_Part2_n500_A1_COL[,3],#
	"1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
	#"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
	" T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
	" T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
	" T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
	"1_C"=Sim3_Part2_n500_A1_COL[,3],#
	"1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
	"1_M"=Sim3_Part2_n500_A1_MIX[,3]#
	),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
png("ReplPLotSMALL.png", width=800, height=1000)#
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png")#, width=800, height=1000)#
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png"), width=800, height=1000, cex=2)#
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png"), width=1000, height=1200, cex=2)#
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png", width=1000, height=1200, cex=2)#
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
?png
png("ReplPLotSMALL.png", width=1000, height=1200, pointsize=14)#
par(mfrow=c(2,3))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n100_A1_COL[,3],#
    "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n100_A1_COL[,3],#
    "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n100_A1_COL[,3],#
    "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=100",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim1_Part2_n500_A1_COL[,3],#
    "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 1 , n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
boxplot(cbind(#
    " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim2_Part2_n500_A1_COL[,3],#
    "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
    #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 2, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
boxplot(cbind(#
    " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
    " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
    " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
    "1_C"=Sim3_Part2_n500_A1_COL[,3],#
    "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
    "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
    ),#
xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
main="Sim 3, n=500",#
ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png", width=1000, height=1200, pointsize=20)#
		par(mfrow=c(2,3))#
		boxplot(cbind(#
			" T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
			" T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
			" T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
			"1_C"=Sim1_Part2_n100_A1_COL[,3],#
			"1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
			"1_M"=Sim1_Part2_n100_A1_MIX[,3]#
			),#
		xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
		main="Sim 1 , n=100",#
		ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
		boxplot(cbind(#
			" T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
			" T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
			" T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
			"1_C"=Sim2_Part2_n100_A1_COL[,3],#
			"1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
			"1_M"=Sim2_Part2_n100_A1_MIX[,3]#
			),#
		xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
		main="Sim 2, n=100",#
		ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
		boxplot(cbind(#
			" T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
			" T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
			" T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
			"1_C"=Sim3_Part2_n100_A1_COL[,3],#
			"1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
			"1_M"=Sim3_Part2_n100_A1_MIX[,3]#
			),#
		xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
		main="Sim 3, n=100",#
		ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
		boxplot(cbind(#
			" T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
			" T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
			" T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
			"1_C"=Sim1_Part2_n500_A1_COL[,3],#
			"1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
			"1_M"=Sim1_Part2_n500_A1_MIX[,3]#
			),#
		xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
		main="Sim 1 , n=500",#
		ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
		boxplot(cbind(#
			" T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
			" T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
			" T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
			"1_C"=Sim2_Part2_n500_A1_COL[,3],#
			"1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
			#"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
			),#
		xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
		main="Sim 2, n=500",#
		ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
		boxplot(cbind(#
			" T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
			" T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
			" T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
			"1_C"=Sim3_Part2_n500_A1_COL[,3],#
			"1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
			"1_M"=Sim3_Part2_n500_A1_MIX[,3]#
			),#
		xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
		main="Sim 3, n=500",#
		ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png", width=1000, height=500, pointsize=20)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
?boxplot
par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))
png("ReplPLotSMALL.png", width=1000, height=500, pointsize=20)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png", width=800, height=800, pointsize=20)
par(mfrow=c(2,3))
dev.off()
png("ReplPLotSMALL.png", width=800, height=800, pointsize=20)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png", width=1200, height=800, pointsize=20)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALL.png", width=1200, height=600, pointsize=14)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",horizontal = TRUE,#
        xlab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALLlong.png", width=1000, height=1200, pointsize=20)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
png("ReplPLotSMALLlong.png", width=1000, height=1200, pointsize=16)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n100_A1_COL[,3],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n100_A1_COL[,3],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n100_A1_COL[,3],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim1_Part2_n500_A1_COL[,3],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim2_Part2_n500_A1_COL[,3],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,3]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,3],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,3],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,3],#
            "1_C"=Sim3_Part2_n500_A1_COL[,3],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,3],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,3]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",#
        ylab=expression(group("||",f[2,][theta] -f[2,][theta* minute],"||" )))#
dev.off()
Sim3_Part2_n500_Atheory_COL[,2]
boxplot(Sim3_Part2_n500_Atheory_COL[,2])
png("ReplPLotSMALLlongK0.png", width=1000, height=1200, pointsize=16)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,2],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,2],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,2],#
            "1_C"=Sim1_Part2_n100_A1_COL[,2],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,2],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,2]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",#
        ylab="Non-empty States" )#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,2],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,2],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,2],#
            "1_C"=Sim2_Part2_n100_A1_COL[,2],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,2],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,2]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",#
        ylab="Non-empty States")#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,2],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,2],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,2],#
            "1_C"=Sim3_Part2_n100_A1_COL[,2],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,2],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,2]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",#
        ylab="Non-empty States")#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,2],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,2],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,2],#
            "1_C"=Sim1_Part2_n500_A1_COL[,2],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,2],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,2]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",#
        ylab="Non-empty States")#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,2],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,2],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,2],#
            "1_C"=Sim2_Part2_n500_A1_COL[,2],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,2]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,2]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",#
        ylab="Non-empty States")#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,2],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,2],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,2],#
            "1_C"=Sim3_Part2_n500_A1_COL[,2],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,2],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,2]#
            ),#
        xlab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",#
        ylab="Non-empty States")#
dev.off()#
png("ReplPLotSMALLK0.png", width=1200, height=600, pointsize=14)#
        par(mfrow=c(2,3))#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n100_Atheory_COL[,2],#
            " T_D"=Sim1_Part2_n100_Atheory_DIAG[,2],#
            " T_M"=Sim1_Part2_n100_Atheory_MIX[,2],#
            "1_C"=Sim1_Part2_n100_A1_COL[,2],#
            "1_D"=Sim1_Part2_n100_A1_DIAG[,2],#
            "1_M"=Sim1_Part2_n100_A1_MIX[,2]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=100",horizontal = TRUE,#
        xlab="Non-empty States")#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n100_Atheory_COL[,2],#
            " T_D"=Sim2_Part2_n100_Atheory_DIAG[,2],#
            " T_M"=Sim2_Part2_n100_Atheory_MIX[,2],#
            "1_C"=Sim2_Part2_n100_A1_COL[,2],#
            "1_D"=Sim2_Part2_n100_A1_DIAG[,2],#
            "1_M"=Sim2_Part2_n100_A1_MIX[,2]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=100",horizontal = TRUE,#
        xlab="Non-empty States")#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n100_Atheory_COL[,2],#
            " T_D"=Sim3_Part2_n100_Atheory_DIAG[,2],#
            " T_M"=Sim3_Part2_n100_Atheory_MIX[,2],#
            "1_C"=Sim3_Part2_n100_A1_COL[,2],#
            "1_D"=Sim3_Part2_n100_A1_DIAG[,2],#
            "1_M"=Sim3_Part2_n100_A1_MIX[,2]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=100",horizontal = TRUE,#
        xlab="Non-empty States")#
        boxplot(cbind(#
            " T_C"=Sim1_Part2_n500_Atheory_COL[,2],#
            " T_D"=Sim1_Part2_n500_Atheory_DIAG[,2],#
            " T_M"=Sim1_Part2_n500_Atheory_MIX[,2],#
            "1_C"=Sim1_Part2_n500_A1_COL[,2],#
            "1_D"=Sim1_Part2_n500_A1_DIAG[,2],#
            "1_M"=Sim1_Part2_n500_A1_MIX[,2]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 1 , n=500",horizontal = TRUE,#
        xlab="Non-empty States")#
        boxplot(cbind(#
            " T_C"=Sim2_Part2_n500_Atheory_COL[,2],#
            " T_D"=Sim2_Part2_n500_Atheory_DIAG[,2],#
            " T_M"=Sim2_Part2_n500_Atheory_MIX[,2],#
            "1_C"=Sim2_Part2_n500_A1_COL[,2],#
            "1_D"=Sim2_Part2_n500_A1_DIAG[,2]#,#
            #"1_M"=Sim2_Part2_n500_A1_MIX[,2]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 2, n=500",horizontal = TRUE,#
        xlab="Non-empty States")#
#
        boxplot(cbind(#
            " T_C"=Sim3_Part2_n500_Atheory_COL[,2],#
            " T_D"=Sim3_Part2_n500_Atheory_DIAG[,2],#
            " T_M"=Sim3_Part2_n500_Atheory_MIX[,2],#
            "1_C"=Sim3_Part2_n500_A1_COL[,2],#
            "1_D"=Sim3_Part2_n500_A1_DIAG[,2],#
            "1_M"=Sim3_Part2_n500_A1_MIX[,2]#
            ),#
        ylab=" Prior (T=Theory, 1=1 & C=Col, D=Diag, M=Mix)",#
        main="Sim 3, n=500",horizontal = TRUE,#
        xlab="Non-empty States")#
dev.off()
ls()
load('~/Google Drive/CSIRO Alzeihmers/t1_ZAttn_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/t2_ZAttn_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/t3_ZAttn_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/t4_ZVisSpat_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/t3_ZVisSpat_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/t3_ZLang_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t2_ZVisSpat_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t1_ZVisSpat_z.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t1_ZVisMem_z.RDATA')
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(aes(fill=k), outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(atop(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep="")), atop("Means"))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
      for (i in 1:dim(GrunK0us$Zs)[1]){rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
#      scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
       scale_colour_grey()+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
################################################################################################
#
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(aes(fill=k), outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(atop(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep="")), atop("Means"))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
    #  for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
#      scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
       scale_colour_grey()+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
getwd()
t1_ZVisSpat_z_pp2<-PostProc_CSIRO( t1_ZVisSpat_z,  t1_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t1_ZVisSpat", simlabel ="Visuo-spatial functioning - Baseline", nEnd=10000)
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(atop(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep="")))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
    #  for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
      #      scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
       scale_colour_grey(na.value = "white")+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
t1_ZVisSpat_z_pp2<-PostProc_CSIRO( t1_ZVisSpat_z,  t1_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t1_ZVisSpat", simlabel ="Visuo-spatial functioning (baseline)", nEnd=10000)
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(atop(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep="")))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
    #  for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
      #      scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
       scale_colour_grey(na.value = "white")+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(atop(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep="")))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
      for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
      #      scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
       scale_colour_grey(na.value = "white")+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
################################################################################################
#
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep=""))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
      for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
      #      scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
       scale_fill_grey()+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
t1_ZVisSpat_z_pp2<-PostProc_CSIRO( t1_ZVisSpat_z,  t1_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t1_ZVisSpat", simlabel ="Visuo-spatial functioning (baseline)", nEnd=10000)
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep=""))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
      for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
         scale_fill_gradientn( low="white", high="black")+theme_bw()+theme(legend.position='right')#
      # scale_fill_grey()+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
t1_ZVisSpat_z_pp2<-PostProc_CSIRO( t1_ZVisSpat_z,  t1_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t1_ZVisSpat", simlabel ="Visuo-spatial functioning (baseline)", nEnd=10000)
PostProc_CSIRO<-function( Grun,  mydata,LineUp=2, prep=10000,Propmin=0.01, isSim=FALSE, simlabel="sim", savelabel="PPplot", nEnd=2000){#
      require(wq)#
      Grun<-trimit(Out=Grun, nEnd)#
      ifelse(isSim==TRUE, Y<-mydata$Y,  Y<-mydata)#
#
      n<-length(Y)#
      K<-dim(Grun$Ps)[2]#
#
      ## 1. split by K0#
      K0<-as.numeric(names(table(Grun$SteadyScore)))#
#
      # SAVE table of tests, parameter estimates and clustering (Z's)#
       p_vals<-data.frame("K0"=K0, "Probability"=as.numeric(table(Grun$SteadyScore))/dim(Grun$Ps)[1],#
        "MAE"=NA, "MSE"=NA,"Pmin"=NA, "Pmax"=NA, "Concordance"=NA, "MAPE"=NA, "MSPE"=NA)#
#
      K0estimates<-vector("list", length(K0))#
      GrunK0us_FIN<-vector("list", length(K0))#
      ZHAT<-vector("list", length(K0))#
      ZTable<-vector("list", length(K0))#
      #for each K0:#
      for ( .K0 in 1:length(K0)){#
      if( p_vals$Probability[.K0]>=0.01){#
      if(K0[.K0]>1){#
      GrunK0<-Grun#
      # split data by K0#
      .iterK0<-c(1:dim(Grun$Ps)[1])[Grun$SteadyScore==K0[.K0]]#
      GrunK0$Mu<- Grun$Mu[.iterK0,]#
      GrunK0$Sig<-Grun$Sig[.iterK0,]#
      GrunK0$Ps<- Grun$Ps[.iterK0,]#
      GrunK0$Loglike<-Grun$Loglike[.iterK0]#
      GrunK0$Zs<- Grun$Zs[,.iterK0]#
      GrunK0$SteadyScore<-Grun$SteadyScore[.iterK0]#
#
      ## 2. unswitch#
      GrunK0us<-QuickSwitch_allPars(GrunK0, LineUp,Propmin )#
      #   GrunK0us_FIN[[.K0]]<-GrunK0us#
#
      # PLOTS density pars#
      GrunK0us$Pars$k<-as.factor(GrunK0us$Pars$k)#
#
      p2<-ggplot(data=GrunK0us$Pars, aes(y=Mu, x=k))+ geom_boxplot(outlier.shape = NA)+#
      ylab("Mean")+#
      xlab("Group (k)")  +#
      theme_bw()+#
      #theme(legend.position = "none")+#
      ggtitle(bquote(italic( paste( "p(K=", .(K0[.K0]), ")=", .(p_vals$Probability[.K0]), sep=""))))#
      # ALOC  PROBABILITIES#
#
      ZTable[[.K0]]<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(GrunK0us$Zs)#
      for (i in 1:dim(GrunK0us$Zs)[1]){#
         i<-which.max(p_vals$Probability) #
        rr<-factor(GrunK0us$Zs[i,], levels=1:maxK)#
      ZTable[[.K0]]<-rbind(ZTable[[.K0]],cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(ZTable[[.K0]])<-c("Yid", "k", "Prob")#
      ZTable[[.K0]]$k<-as.factor(ZTable[[.K0]]$k)#
#
      # p4<-ggplot(ZTable[[.K0]], aes(x=Yid, y=k, fill=Prob)) + geom_tile()+ggtitle(  paste( simlabel, ": Posterior Allocation Prob."))+#
        #xlab("Index of ordered Y")+#
      # scale_fill_gradientn(colours = c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494" ))+theme_bw()+theme(legend.position='right')#
      ggAllocationPlot<-function( outZ, myY, labhere){#
      grr<-outZ[order(myY),]#
      grrTable<-data.frame("myY"=NULL, "k"=NULL, "Prob"=NULL)#
      maxK<-max(grr)#
      for (i in 1:length(myY)){rr<-factor(grr[i,], levels=1:maxK)#
      grrTable<-rbind(grrTable,cbind(i,c(1:maxK), matrix(table(rr)/ length(rr) )))    }#
      names(grrTable)<-c("myY", "k", "Prob")#
        grrTable$k<-as.factor(grrTable$k)#
#
      gp<-ggplot(grrTable, aes(x=myY, y=k, fill=Prob)) + geom_tile()+ggtitle(labhere )+#
      xlab("Index of ordered Y")+#
         scale_fill_gradient( low="white", high="black")+theme_bw()+theme(legend.position='right')#
      # scale_fill_grey()+theme_bw()+theme(legend.position='right')#
      #ggsave( plot=gp,  filename=paste( "Allocations_", plotfilename ,"K_",maxK, ".pdf",sep="") )#
      gp#
      }#
#
      p4<-ggAllocationPlot(GrunK0us$Zs, Y , simlabel)#
      maxZ<-function (x)  as.numeric(names(which.max(table( x ))))#
        Zhat<- factor( apply(t(GrunK0us$Zs), 2,maxZ))#
        ZHAT[[.K0]]<-Zhat#
      ## 3. , MSE#
#
      GrunK0us$Pars$k<-as.numeric(as.character(GrunK0us$Pars$k))#
#
      Zetc<-ZmixUnderConstruction::Zagg(GrunK0us, Y)#
      p_vals$MAE[.K0]<- Zetc$MAE#
      p_vals$MSE[.K0]<- Zetc$MSE#
      postPredTests<-PostPredFunk( GrunK0us,Zetc, Y, prep, simlabel)#
      # store output in p_vasl#
      p_vals$Pmin[.K0]<-postPredTests$MinP#
      p_vals$Pmax[.K0]<-postPredTests$MaxP#
      p_vals$MAPE[.K0]<-postPredTests$MAPE#
      p_vals$MSPE[.K0]<-postPredTests$MSPE#
      p_vals$Concordance[.K0]<-1-postPredTests$Concordance#
#
      #p5<-postPredTests$ggp#
#
      # CI#
      .par<-melt(GrunK0us$Pars, id.vars=c("Iteration", "k"))#
      theta<-aggregate( value~variable+factor(k), mean ,data=.par)#
      mu<-round(aggregate( value~variable+factor(k), mean ,data=.par)[,3], 2)#
      ci<-round(aggregate( value~variable+factor(k), quantile,c(0.025, 0.975) ,data=.par)[,3],2)#
      thetaCI<-cbind( theta[,c(1,2)] , "value"=paste( mu, "(", ci[,1] , "," ,ci[,2] ,")", sep="" ))#
      K0estimates[[.K0]]<-cbind(thetaCI, "K0"=K0[.K0])#
#
      if(K0[.K0]>1){#
      pdf( file= paste("PPplots_", savelabel ,"K_", K0[.K0] ,".pdf", sep=""), width=8, height=3)#
      print( wq::layOut(#
      # list(p1,  1, 1:2),#
          list(p2,  1, 1),   #means#
          # list(p3,  1,5:6),#
          list(p4,  1,2:3)))    #allocations#
          #   list(p5,  2,4:6)))#
      dev.off()#
      }#
#
      }}}#
      Final_Pars<-do.call(rbind, K0estimates)#
      print(p_vals)#
      #Result<-list( Final_Pars, p_vals, "Z"=Zhat)#
      #save(Result, file=paste("PPresults_", savelabel ,".RDATA", sep=""))#
      return(list( Final_Pars, p_vals, ZHAT, ZTable))#
      }
t1_ZVisSpat_z_pp2<-PostProc_CSIRO( t1_ZVisSpat_z,  t1_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t1_ZVisSpat", simlabel ="Visuo-spatial functioning (baseline)", nEnd=10000)
t2_ZVisSpat_z_pp2<-PostProc_CSIRO( t2_ZVisSpat_z,  t2_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t2_ZVisSpat", simlabel ="Visuo-spatial functioning (18 months)", nEnd=10000)#
  t3_ZVisSpat_z_pp2<-PostProc_CSIRO( t3_ZVisSpat_z,  t3_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t3_ZVisSpat", simlabel ="Visuo-spatial functioning (36 months)", nEnd=10000)#
  t4_ZVisSpat_z_pp2<-PostProc_CSIRO( t4_ZVisSpat_z,  t4_ZVisSpat_z$YZ, LineUp=2, prep=1,Propmin=0.01, isSim=FALSE,savelabel="t4_ZVisSpat", simlabel ="Visuo-spatial functioning (54 months)", nEnd=10000)#
  t2_ZAttn_z_pp2<-PostProc_CSIRO( t2_ZAttn_z,  t2_ZAttn_z$YZ, LineUp=2, prep=1,Propmin=0.05, isSim=FALSE, savelabel ="t2_ZAttn", simlabel ="Attention & Processing Speed (18 months)", nEnd=10000 )#
  t3_ZAttn_z_pp2<-PostProc_CSIRO( t3_ZAttn_z,  t3_ZAttn_z$YZ, LineUp=2, prep=1,Propmin=0.05, isSim=FALSE, savelabel ="t3_ZAttn", simlabel ="Attention & Processing Speed (36 Months)", nEnd=10000 )#
  t1_ZVisMem_z_pp2<-PostProc_CSIRO( t1_ZVisMem_z,  t1_ZVisMem_z$YZ, LineUp=2, prep=1,Propmin=0.05, isSim=FALSE, savelabel="t1_ZVisMem", simlabel ="t1_ZVisMem", nEnd=10000 )#
  t1_ZAttn_z_pp2<-PostProc_CSIRO( t1_ZAttn_z,  t1_ZAttn_z$YZ, LineUp=2, prep=1,Propmin=0.05, isSim=FALSE, savelabel ="t1_ZAttn", simlabel ="t1_ZAttn", nEnd=10000 )#
  t3_ZLang_z_pp2<-PostProc_CSIRO( t3_ZLang_z,  t3_ZLang_z$YZ, LineUp=2, prep=1,Propmin=0.05, isSim=FALSE,savelabel  ="t3_ZLang", simlabel ="Attention & Processing Speed (36 months)", nEnd=10000 )
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/workspace_may25.RDATA')
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t1_ZVisSpat_z_pp2.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t2_ZVisSpat_z_pp2.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t2_ZVMem_z_pp2.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t3_ZVisSpat_z_pp2.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t4_ZVisSpat_z_pp2.RDATA')#
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/t4_ZVMem_z_pp2.RDATA')
load('~/Google Drive/CSIRO Alzeihmers/RUN March 3/Workspace_May22.RDATA')
PC.APOE.AMPP
PLOT.PCA.APOE
dev.off()
PLOT.PCA.APOE
sum12ggplot
sum12ggplot+theme_bw()
sum12ggplot+theme_grey()
sum12ggplot+theme(panel.background(element_rect(fill="white") , panel.grid.major = element_line(colour = "grey40"),#
    panel.grid.minor = element_blank()))
sum12ggplot+theme(panel.background(panel.grid.major = element_line(colour = "grey40"),#
    panel.grid.minor = element_blank()))
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey40"),#
    panel.grid.minor = element_blank()))
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey40"),#
    panel.grid.minor = element_blank())
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey40"),#
    panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey01"),#
    panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey10"),#
    panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey"),#
    panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))
sum12ggplot+theme(panel.grid.major = element_line(colour = "grey"),#
    panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))+theme_bw()
sum12ggplot+theme_bw()+theme(panel.grid.major = element_line(colour = "grey"),#
    panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))
pdf("PCA_AMPvsFlex_nogrey.pdf", width=8, height=4)
sum12ggplot+theme_bw()+theme(panel.grid.major = element_line(colour = "grey"),     panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"))
dev.off()
ggplot(sum12, aes(x=variable, y=value, colour=Clusters, group=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+xlab("Principal Component")+#
    geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")+#
#    scale_colour_manual(values=c( "green", "red","blue","purple"),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))#
    scale_colour_manual(values=1:4,name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
ggplot(sum12, aes(x=variable, y=value, colour=Clusters, group=Clusters)) +
geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +
geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+xlab("Principal Component")+
geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")+
#    scale_colour_manual(values=c( "green", "red","blue","purple"),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
scale_linetype_manual(values=1:4,name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
ggplot(sum12, aes(x=variable, y=value, colour=Clusters, group=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+xlab("Principal Component")+#
    geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")+#
#    scale_colour_manual(values=c( "green", "red","blue","purple"),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))#
    scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
ggplot(sum12, aes(x=variable, y=value, colour=Clusters, group=Clusters)) +
geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +
geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
xlab("Principal Component")+
geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")+
ggplot(sum12, aes(x=variable, y=value, colour=Clusters, group=Clusters)) +
geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +
geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))+
xlab("Principal Component")+
geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")+
ggplot(sum12, aes(x=variable, y=value, colour=Clusters, group=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))+#
    xlab("Principal Component")+#
    geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")#
#    scale_colour_manual(values=c( "green", "red","blue","purple"),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
ggplot(sum12, aes(x=variable, y=value, group=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))+#
    xlab("Principal Component")+#
    geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")#
#    scale_colour_manual(values=c( "green", "red","blue","purple"),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
ggplot(sum12, aes(x=variable, y=value, linetype=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line(position=pd, size=1) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))+#
    xlab("Principal Component")+#
    geom_point(position=pd)+ggtitle("PCA: Clusters given AMPP>2 and Flexmix (ICL)")#
#    scale_colour_manual(values=c( "green", "red","blue","purple"),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))
ggplot(sum12, aes(x=variable, y=value, group=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line(position=pd, size=1, linetype=Clusters) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))+#
    xlab("Principal Component")
ggplot(sum12, aes(x=variable, y=value, group=Clusters)) +#
    geom_errorbar(aes(ymin=value-ci, ymax=value+ci), width=.2, position=pd) +#
    geom_line( position=pd, size=1, aes(linetype=Clusters)) + ylab("Principal Component Score\n(Mean and 95% CI)")+ scale_linetype_manual(values=c(1,2,3,4),name="Clusters",labels=c("AMPP <2", "AMPP>2","Flexmix 1", "Flexmix 2"))+#
    xlab("Principal Component")
par(mfrow=c(2,2))#
plot(z1to5, main="Flexmix: Model choice")#
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - ICL)", ylim=c(-5,5))#
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="ICL"))  )#
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - BIC)", ylim=c(-5,5))#
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="BIC"))  )#
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - AIC)", ylim=c(-5,5))#
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="AIC"))  )
library(flexmix)
par(mfrow=c(2,2))#
plot(z1to5, main="Flexmix: Model choice")#
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - ICL)", ylim=c(-5,5))#
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="ICL"))  )#
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - BIC)", ylim=c(-5,5))#
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="BIC"))  )#
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - AIC)", ylim=c(-5,5))#
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="AIC"))  )
pdf("FlexmixMODEL_ChoicePCA.pdf", width=4, height=4)
par(mfrow=c(2,2))
plot(z1to5, main="Flexmix: Model choice")
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - ICL)", ylim=c(-5,5))
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="ICL"))  )
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - BIC)", ylim=c(-5,5))
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="BIC"))  )
eqscplot(X.pca[,2],X.pca[,3],type="n",xlab="Second Component", ylab="Third Component", main="PCA VS Clusters (Flexmix - AIC)", ylim=c(-5,5))
points(X.pca[,2],X.pca[,3], pch = 20, cex = 1, col =  clusters(getModel(z1to5, which="AIC"))  )
dev.off()
p13.2
library(roxygen2_)
library(roxygen2)
library(devtools)
setwd("/Users/zoevanhavre/Google Drive/GitHub/Zhmm.0/R")
setwd("/Users/zoevanhavre/Google Drive/GitHub/Zhmm.0/R")
#' ReplicateSimer2#
#'#
#' parallel tempering with a column prior - option to mix over column or stick to j=1#
#' @param x, alpha, log=False#
#' @keywords dirichlet#
#' @export#
#' @examples dDirichlet(c(.1, .9), c(0.1,0.1))#
#
ReplicateSimer2<-function(  N, n, Kfit=10, SimID, ITERATIONS, BURN,  AMAX,  PRIOR_TYPE, PTchain=20){#
        #  STORE SIMULATIONS in a list#
        simFunctionMorpher<-function(SimNumber){#
            if( SimNumber==1){  return(FunkSim1)#
            }else if (SimNumber==2){    return(FunkSim3)#
            }else if (SimNumber==3){    return(FunkSim4)#
            }   }#
        MorphingSIMULATE<-simFunctionMorpher(SimID)#
        SIMS<-lapply( rep(n,N),  MorphingSIMULATE )#
        # Compute density for L1 norm and store in a list#
        simDensityMorpher<-function(SimNumber){#
            if( SimNumber==1){  return( SimDensity1)#
            }else if (SimNumber==2){    return(SimDensity3)#
            }else if (SimNumber==3){    return(SimDensity4)#
            }   }#
        MorphineDENSITY<-simDensityMorpher(SimID)#
#
        SIM_DENSITY_TRUE<-lapply(SIMS,  MorphineDENSITY)#
#
        # Clean up Gibbs for lyra...#
#
Result.store<-data.frame("Replicate"=c(1:N), "SimID"=SimID, "AlphaMax"=AMAX, "Prior"=PRIOR_TYPE, "ModeK0"=0, "MeanfDist"=0, "MeanfDistMERGED"=0, "WorstMixed"=0)#
#
for (.rep in 1:N){#
My.Result<-gibbsHMM_PT_wDist_LYRAfinally(YZ=SIMS[[.rep]],K=Kfit, densTrue=SIM_DENSITY_TRUE[[.rep]],  M=ITERATIONS,  alphaMAX=AMAX, type= PRIOR_TYPE, alphaMin=0.001, J=PTchain, SuppressAll="TRUE")#
#
Result.store$ModeK0[.rep]<-as.numeric(names(sort(table(factor(My.Result$K0[-c(1:BURN)])),decreasing=TRUE)[1]))#
Result.store$MeanfDist[.rep]<-mean(My.Result$f2Dist[-c(1:BURN)])#
Result.store$MeanfDistMERGED[.rep]<-mean(My.Result$f2Dist_Merged[-c(1:BURN)])#
Result.store$WorstMixed[.rep]<-min(My.Result$WorstMixProp[-c(1:BURN)])#
#
write.csv(Result.store[1:.rep,], file=paste( "RepResult_Sim" ,SimID, "Prior", PRIOR_TYPE, "Alpha", AMAX,"Iters",ITERATIONS,".csv", sep=""))#
save(Result.store, file=paste( "RepResult_Sim" ,SimID, "Prior", PRIOR_TYPE,"Alpha",AMAX,"Iters",ITERATIONS, ".RDATA", sep="_"))#
#
Sys.sleep(0.1)#
print(Result.store[1:.rep,])#
Sys.sleep(0.1)#
}#
#
pdf( file= paste( "Sim" ,SimID, "Prior", PRIOR_TYPE, "MaxAlpha", AMAX,"Iters",ITERATIONS, ".pdf", sep="") ,width=5, height=3)#
            print( wq::layOut(  #
            list(ggplot(data=Result.store, aes(x=ModeK0))+geom_histogram(binwidth=1)+theme_bw()+xlab("K_0")+#
                ggtitle(paste( "RepResult_Sim" ,SimID, "Prior", PRIOR_TYPE, "Alpha", AMAX)) #
                ,   1, 1:2),  #
            list(ggplot(data=Result.store, aes(y=MeanfDist, x= factor(1)))+geom_boxplot()+theme_bw()+ylab("Distance") +ggtitle("Mean f2Dist distance"),     1, 3)  ))#
dev.off()#
    return(Result.store)#
        }
setwd("..")
document()
